name: Build and Deploy Sphinx Documentation

on:
  push:
    branches:
      - deploy_documentation  # Branche à surveiller pour déclencher l'action

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Cloner le dépôt
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry  # Chemin où Poetry stocke ses dépendances
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Poetry package manager
        run: |
            curl -sSL https://install.python-poetry.org | python3 -
            echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Synchronize poetry.lock
        run: |
          if [ -f "poetry.lock" ]; then
            poetry lock --no-update
          else
            echo "No poetry.lock file found, skipping lock synchronization"
          fi

      - name: Install project dependencies
        run: poetry install

      # Étape 3 : Générer les fichiers .rst avec sphinx-apidoc
      - name: Generate .rst files with sphinx-apidoc
        run: |
          poetry run sphinx-apidoc -o docs/source projet_kbd --force --separate

      # Étape 4 : Construire la documentation
      - name: Build documentation
        run: poetry run sphinx-build -b html -v docs/source docs/_build/html

      # Étape 5 : Déployer sur GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/_build/html
